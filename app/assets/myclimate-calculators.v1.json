{
  "openapi": "3.0.0",
  "x-stoplight": {
    "id": "v015lko0vls7w"
  },
  "info": {
    "title": "myclimate calculator APIs",
    "version": "1.0",
    "contact": {
      "url": "https://connect.myclimate.org",
      "name": "Foundation myclimate",
      "email": "info@myclimate.org"
    },
    "description": "The myclimate calculator APIs can be used to calculate carbon emissions for various transportation types and products. If you are interested in using our APIs, please contact us to get credentials. We provide access to our calculator APIs for a licence fee and only for projects with an integrated function to contribute to climate protection projects.\nFor educational projects on a high education level we offer access to our calculator APIs for free.\n\nWe are currently offering APIs to calculate carbon emissions for the following entities. These APIs accept a single entity (e.g. a single flight).\n\n- flights\n- car trips\n- cruises\n- companies\n- personal footprint\n\nAdditionally, we offer bulk APIs which allow to receive a list of the same entities (e.g. a list of flights). The API's response includes carbon emissions per single entity as well as the total emissions of all entities. These are supported for the following entities:\n\n- flights\n- cars\n\nOur bulk APIs accept data either as CSV or JSON.\n\nOur APIs are built to sustain one request per second. If you require higher load, please let us know.\n\nBecause the API requires authorization, it is not possible to query it directly in the frontend via Javascript. The query is made from server to server."
  },
  "servers": [
    {
      "url": "https://api.myclimate.org",
      "description": "production"
    },
    {
      "url": "https://api.myc-staging.org",
      "description": "staging"
    }
  ],
  "paths": {
    "/v1/flight_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions of a single flight",
        "operationId": "post-v1-flight_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightCalculatorOutput"
                },
                "examples": {
                  "Valid response": {
                    "value": {
                      "kg": 1392.2391855028054,
                      "km": 2889.9273706340364,
                      "fuel_kg_per_passenger": 96.50924518207182,
                      "price_in_eur_cents": 0,
                      "input_params": {
                        "from": "ZRH",
                        "to": "FRA",
                        "via": "LHR",
                        "flight_class": "economy",
                        "passengers": 2,
                        "roundtrip": true
                      }
                    }
                  },
                  "Unknown airport `ZZZ`": {
                    "value": {
                      "errors": {
                        "from": [
                          "Could not find airport 'ZZZ'"
                        ]
                      },
                      "input_params": {
                        "from": "ZZZ",
                        "to": "FRA",
                        "via": "LHR",
                        "flight_class": "economy",
                        "passengers": 2,
                        "roundtrip": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightCalculatorInput"
              },
              "examples": {
                "Valid example": {
                  "value": {
                    "from": "ZRH",
                    "to": "FRA",
                    "via": "LHR",
                    "passengers": 2,
                    "roundtrip": true,
                    "flight_class": "economy"
                  }
                },
                "Unknown airport `ZZZ`": {
                  "value": {
                    "from": "ZZZ",
                    "to": "FRA",
                    "via": "LHR",
                    "passengers": 2,
                    "roundtrip": true,
                    "flight_class": "economy"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Flight Calculator"
        ],
        "description": "The myclimate flight API calculates the carbon emissions of a single flight. It supports detailed parameters such as flight class or stopover airport.\n\nIf you want to calculate multiple flights at once, use the bulk flight API instead.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies.\n\nRefer to the detailed [documentation of the myclimate flight calculator](https://www.myclimate.org/en/information/about-myclimate/downloads/flight-emission-calculator/) to learn more about how flight emissions are calculated."
      }
    },
    "/v1/car_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions for a single car trip",
        "operationId": "post-v1-car_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "object",
                      "description": "only present when there were errors in the request",
                      "properties": {
                        "car_type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "fuel_type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "fuel_consumption": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "km": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "electric_location": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "kg": {
                      "$ref": "#/components/schemas/CO2eqkg"
                    },
                    "input_params": {
                      "$ref": "#/components/schemas/CarCalculatorInput"
                    },
                    "price_in_eur_cents": {
                      "$ref": "#/components/schemas/PriceEUR"
                    },
                    "price_in_chf_rappen": {
                      "$ref": "#/components/schemas/PriceCHF"
                    }
                  },
                  "required": [
                    "input_params"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CarCalculatorInput"
              }
            }
          }
        },
        "tags": [
          "Car Calculator"
        ],
        "description": "The myclimate car API calculates the carbon emissions of a single car trip. It supports many different fuel types and allows the estimation of the car's fuel consumption if it is not known.\n\nIf you want to calculate multiple car trips at once, use the bulk car API instead.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies."
      }
    },
    "/v1/cruise_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions of a holiday on a cruise ship",
        "operationId": "post-v1-cruise_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "object",
                      "properties": {
                        "number_of_occupants": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "number_of_compensations": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cruise_size_class": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cruise_cabin_type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cruise_duration": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cruise_days_with_port_call": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "kg": {
                      "$ref": "#/components/schemas/CO2eqkg"
                    },
                    "input_params": {
                      "$ref": "#/components/schemas/CruiseCalculatorInput"
                    },
                    "price_in_eur_cents": {
                      "$ref": "#/components/schemas/PriceEUR"
                    },
                    "price_in_chf_rappen": {
                      "$ref": "#/components/schemas/PriceCHF"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CruiseCalculatorInput"
              }
            }
          }
        },
        "tags": [
          "Cruise Ship Calculator"
        ],
        "description": "The myclimate cruise API calculates the carbon emissions of a holiday on a cruise ship. It supports many parameters such as the size of the ship, the cabin type or for how many people would like to calculate the emmisions.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies."
      }
    },
    "/v1/bulk_flight_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions for multiple flights (JSON)",
        "operationId": "post-v1-bulk_flight_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flights": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "abc456",
                            "description": "Customer reference provided in the input value of this specific flight."
                          },
                          "from": {
                            "$ref": "#/components/schemas/Airport3LetterIATA"
                          },
                          "to": {
                            "$ref": "#/components/schemas/Airport3LetterIATA"
                          },
                          "flight_class": {
                            "type": "string",
                            "example": "economy",
                            "enum": [
                              "economy",
                              "first",
                              "business"
                            ],
                            "description": "Value provided in the input."
                          },
                          "kg": {
                            "$ref": "#/components/schemas/CO2eqkg"
                          },
                          "km": {
                            "type": "number",
                            "description": "Relevant calculated flight distance"
                          },
                          "fuel_kg_per_passenger": {
                            "type": "number",
                            "description": "The amount of fuel used per passenger."
                          },
                          "price_cents": {
                            "$ref": "#/components/schemas/PriceEUR"
                          },
                          "price_rappens": {
                            "$ref": "#/components/schemas/PriceCHF"
                          },
                          "status": {
                            "type": "string",
                            "description": "Either `OK` or an error message"
                          }
                        }
                      }
                    },
                    "sum_kg": {
                      "type": "integer",
                      "description": "The sum of carbon emissions of all calculated flights"
                    },
                    "sum_km": {
                      "type": "integer",
                      "description": "The sum of the calculated distance of all flights"
                    },
                    "sum_price_cents": {
                      "$ref": "#/components/schemas/PriceEUR"
                    },
                    "sum_price_rappens": {
                      "$ref": "#/components/schemas/PriceCHF"
                    }
                  }
                },
                "examples": {
                  "Unknown airport": {
                    "value": {
                      "flights": [
                        {
                          "id": "abc456",
                          "from": "ZRH",
                          "to": "ZRH",
                          "flight_class": "economy",
                          "kg": 8402.385146467666,
                          "km": 0,
                          "fuel_kg_per_passenger": 0,
                          "price_cents": 0,
                          "price_rappens": 0,
                          "status": "string"
                        }
                      ],
                      "sum_kg": 0,
                      "sum_km": 0,
                      "sum_price_cents": 0,
                      "sum_price_rappens": 0
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flights": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "abc5698",
                          "description": "A customer reference for this specific flight. The API returns that same reference in the response."
                        },
                        "from": {
                          "$ref": "#/components/schemas/Airport3LetterIATA"
                        },
                        "to": {
                          "$ref": "#/components/schemas/Airport3LetterIATA"
                        },
                        "flight_class": {
                          "type": "string",
                          "enum": [
                            "economy",
                            "first",
                            "business"
                          ],
                          "example": "economy"
                        }
                      },
                      "required": [
                        "from",
                        "to",
                        "flight_class"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Valid input": {
                  "value": {
                    "flights": [
                      {
                        "id": "3597_abc_31",
                        "from": "LIS",
                        "to": "MUC",
                        "flight_class": "economy"
                      },
                      {
                        "id": "3598_abc_32",
                        "from": "MUC",
                        "to": "LIS",
                        "flight_class": "first"
                      },
                      {
                        "id": "3598_abc_33",
                        "from": "FRA",
                        "to": "LIS",
                        "flight_class": "economy"
                      },
                      {
                        "id": "3598_abc_00",
                        "from": "MUC",
                        "to": "ZRH",
                        "flight_class": "economy"
                      }
                    ]
                  }
                },
                "Unknown airport (ZZY)": {
                  "value": {
                    "flights": [
                      {
                        "id": "3597_abc_31",
                        "from": "LIS",
                        "to": "MUC",
                        "flight_class": "economy"
                      },
                      {
                        "id": "3598_abc_32",
                        "from": "MUC",
                        "to": "LIS",
                        "flight_class": "first"
                      },
                      {
                        "id": "3598_abc_33",
                        "from": "FRA",
                        "to": "LIS",
                        "flight_class": "economy"
                      },
                      {
                        "id": "3598_abc_00",
                        "from": "MUC",
                        "to": "ZZY",
                        "flight_class": "economy"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Every object in the `flights` array represents a single flight."
        },
        "tags": [
          "Flight Calculator"
        ],
        "description": "The bulk flight calculator allows to calculate carbon emissions of multiple flights at once. It supports JSON and CSV as input.\n\nWe offer the following solutions to calculate carbon emissions for multiple flights:\n\n- API which accepts either JSON or CSV (this endpoint)\n- A [web UI](https://api.myclimate.org/v1/flight_bulk_entry/new)\n- A [CSV upload tool](https://api.myclimate.org)\n\nBoth the web UI and the CSV upload tool can be used without programming knowledge and do not require development effort.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies."
      }
    },
    "/v1/bulk_car_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions of multiple car trips (JSON)",
        "operationId": "post-v1-bulk_car_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trips": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/BulkCustomerReference"
                          },
                          "km": {
                            "description": "Returned as delivered in the input",
                            "type": "number"
                          },
                          "fuel_type": {
                            "type": "string",
                            "example": "gas",
                            "description": "Returned as delivered in the input"
                          },
                          "fuel_consumption": {
                            "description": "Returned as delivered in the input",
                            "type": "number"
                          },
                          "electric_location": {
                            "type": "string",
                            "description": "Returned as delivered in the input"
                          },
                          "kg": {
                            "$ref": "#/components/schemas/CO2eqkg"
                          },
                          "price_cents": {
                            "$ref": "#/components/schemas/PriceEUR"
                          },
                          "price_rappens": {
                            "$ref": "#/components/schemas/PriceCHF"
                          },
                          "status": {
                            "type": "string",
                            "example": "OK",
                            "description": "Either `OK` or an error message such as `km: must be greater than or equal to 1`"
                          },
                          "car_type": {
                            "type": "string",
                            "description": "Returned as delivered in the input"
                          }
                        }
                      }
                    },
                    "sum_price_cents": {
                      "$ref": "#/components/schemas/PriceEUR"
                    },
                    "sum_price_rappens": {
                      "$ref": "#/components/schemas/PriceCHF"
                    },
                    "sum_kg": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Not a number": {
                    "value": {
                      "trips": [
                        {
                          "id": "3597_abc_31",
                          "km": 3200,
                          "car_type": "small",
                          "fuel_type": "gas",
                          "fuel_consumption": "",
                          "electric_location": "",
                          "kg": 8891.8,
                          "price_cents": 21192,
                          "price_rappens": 25431,
                          "status": "OK"
                        },
                        {
                          "id": "3598_abc_32",
                          "km": 200,
                          "car_type": "small",
                          "fuel_type": "gas",
                          "fuel_consumption": "",
                          "electric_location": "",
                          "kg": 55.57,
                          "price_cents": 132,
                          "price_rappens": 159,
                          "status": "OK"
                        },
                        {
                          "id": "3598_abc_33",
                          "km": 1200,
                          "car_type": "midsize",
                          "fuel_type": "diesel",
                          "fuel_consumption": "",
                          "electric_location": "",
                          "kg": 376.17,
                          "price_cents": 897,
                          "price_rappens": 1076,
                          "status": "OK"
                        },
                        {
                          "id": "3598_abc_00",
                          "km": "xyz",
                          "car_type": "luxury_suv_van",
                          "fuel_type": "biogas",
                          "fuel_consumption": "",
                          "electric_location": "",
                          "kg": "",
                          "price_cents": "",
                          "status": "Km is not a number"
                        }
                      ],
                      "sum_price_cents": 22221,
                      "sum_price_rappens": 26666,
                      "sum_kg": 9323.54
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Car Calculator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trips": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/BulkCustomerReference"
                        },
                        "km": {
                          "type": "number"
                        },
                        "car_type": {
                          "type": "string"
                        },
                        "fuel_type": {
                          "type": "string"
                        },
                        "fuel_consumption": {
                          "type": "number"
                        },
                        "electric_location": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Not a number": {
                  "value": {
                    "trips": [
                      {
                        "id": "3597_abc_31",
                        "km": 32000,
                        "car_type": "small",
                        "fuel_type": "gas"
                      },
                      {
                        "id": "3598_abc_32",
                        "km": 200,
                        "car_type": "small",
                        "fuel_type": "gas"
                      },
                      {
                        "id": "3598_abc_33",
                        "km": 1200,
                        "car_type": "midsize",
                        "fuel_type": "diesel"
                      },
                      {
                        "id": "3598_abc_00",
                        "km": "xyz",
                        "car_type": "luxury_suv_van",
                        "fuel_type": "biogas"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "The bulk car calculator allows to calculate carbon emissions of multiple car trips at once. It supports JSON and CSV as input.\n\nWe offer the following solutions to calculate carbon emissions for multiple car trips:\n\n- API which accepts either JSON or CSV (this endpoint)\n- A [CSV upload tool](https://api.myclimate.org)\n\nThe CSV upload tool can be used without programming knowledge and does not require development effort.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies."
      }
    },
    "/v1/company_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions of a company",
        "operationId": "post-v1-company_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kg": {
                      "type": "number",
                      "format": "float",
                      "description": "total carbon emissions in `kg`\nsum of `energy_kg`, `mobility_kg`, `food_kg` and `supplies_kg`"
                    },
                    "energy_kg": {
                      "type": "string"
                    },
                    "digital_services_kg": {
                      "type": "string"
                    },
                    "mobility_kg": {
                      "type": "string"
                    },
                    "food_kg": {
                      "type": "string"
                    },
                    "supplies_kg": {
                      "type": "string"
                    },
                    "home_office_kg": {
                      "type": "string"
                    },
                    "price_in_eur_cents": {
                      "type": "number",
                      "description": "price in EUR to contribute to climate protection projects according to the total carbon emissions\nnote that this parameter is only present in the response if agreed so with myclimate",
                      "format": "float"
                    },
                    "price_in_chf_rappen": {
                      "type": "number",
                      "description": "price in CHF to contribute to climate protection projects according to the total carbon emissions\nnote that this parameter is only present in the response if agreed so with myclimate",
                      "format": "float"
                    },
                    "input_params": {
                      "description": "lists all input parameters as they have been used in the calculation",
                      "type": "object",
                      "properties": {
                        "": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Minimal example": {
                    "value": {
                      "kg": 35244.5,
                      "energy_kg": "5329.8",
                      "mobility_kg": "23303.4",
                      "food_kg": "2368.5",
                      "supplies_kg": "4242.8",
                      "price_in_eur_cents": 0,
                      "input_params": {
                        "name": "Acme Inc.",
                        "country": "CH",
                        "number_of_employees": 5,
                        "heated_area": 500,
                        "home_office_per_cent": null,
                        "estimate_energy": "1",
                        "power_consumption_kwh": null,
                        "green_electricity": null,
                        "oil_liters": null,
                        "natural_gas_m3": null,
                        "biogas_m3": null,
                        "district_heat_kwh": null,
                        "wood_kwh": null,
                        "estimate_digital_services": "1",
                        "cloud_storage_gbyte": null,
                        "web_data_transfer_gbyte": null,
                        "heat_pump": null,
                        "estimate_commuting_mobility": "1",
                        "estimate_business_trip_mobility": "1",
                        "consider_advanced_business_trip_inputs": "0",
                        "commuted_yearly_public_transportation_km": null,
                        "commuted_yearly_car_km": null,
                        "business_yearly_car_km": null,
                        "business_yearly_public_transportation_km": null,
                        "hotel_nights_amount": null,
                        "car_fuel_gasoline_liters": null,
                        "car_fuel_diesel_liters": null,
                        "car_fuel_natural_gas_kg": null,
                        "car_fuel_biogas_kg": null,
                        "car_fuel_electric_kwh": null,
                        "short_flights_amount": null,
                        "medium_flights_amount": null,
                        "long_flights_amount": null,
                        "business_or_first_flights_per_cent": null,
                        "estimate_food_and_beverages": "1",
                        "warm_meal_meat_amount": null,
                        "warm_meal_vegetarian_amount": null,
                        "snacks": null,
                        "soda_liters": null,
                        "coffee_portions": null,
                        "tea_portions": null,
                        "estimate_supplies": "1",
                        "consider_advanced_supplies_inputs": "0",
                        "paper_kg": null,
                        "printed_matters_kg": null,
                        "electronic_devices_amount": null,
                        "garbage_kg": null,
                        "paper_recycling_paper_per_cent": null,
                        "toners_amount": null,
                        "water_m3": null,
                        "garbage_recycling_kg": null,
                        "garbage_electronics_kg": null
                      }
                    }
                  },
                  "Error: missing country": {
                    "value": {
                      "errors": {
                        "country": [
                          "can't be blank"
                        ]
                      },
                      "input_params": {
                        "name": "Acme Inc.",
                        "country": null,
                        "number_of_employees": 5,
                        "heated_area": 500,
                        "home_office_per_cent": null,
                        "estimate_energy": "1",
                        "power_consumption_kwh": null,
                        "green_electricity": null,
                        "oil_liters": null,
                        "natural_gas_m3": null,
                        "biogas_m3": null,
                        "district_heat_kwh": null,
                        "wood_kwh": null,
                        "estimate_digital_services": "1",
                        "cloud_storage_gbyte": null,
                        "web_data_transfer_gbyte": null,
                        "heat_pump": null,
                        "estimate_commuting_mobility": "1",
                        "estimate_business_trip_mobility": "1",
                        "consider_advanced_business_trip_inputs": "0",
                        "commuted_yearly_public_transportation_km": null,
                        "commuted_yearly_car_km": null,
                        "business_yearly_car_km": null,
                        "business_yearly_public_transportation_km": null,
                        "hotel_nights_amount": null,
                        "car_fuel_gasoline_liters": null,
                        "car_fuel_diesel_liters": null,
                        "car_fuel_natural_gas_kg": null,
                        "car_fuel_biogas_kg": null,
                        "car_fuel_electric_kwh": null,
                        "short_flights_amount": null,
                        "medium_flights_amount": null,
                        "long_flights_amount": null,
                        "business_or_first_flights_per_cent": null,
                        "estimate_food_and_beverages": "1",
                        "warm_meal_meat_amount": null,
                        "warm_meal_vegetarian_amount": null,
                        "snacks": null,
                        "soda_liters": null,
                        "coffee_portions": null,
                        "tea_portions": null,
                        "estimate_supplies": "1",
                        "consider_advanced_supplies_inputs": "0",
                        "paper_kg": null,
                        "printed_matters_kg": null,
                        "electronic_devices_amount": null,
                        "garbage_kg": null,
                        "paper_recycling_paper_per_cent": null,
                        "toners_amount": null,
                        "water_m3": null,
                        "garbage_recycling_kg": null,
                        "garbage_electronics_kg": null
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Calculates carbon emissions using the [myclimate company calculator](https://co2.myclimate.org/en/company_calculators/new).\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies.\n\nThe calculation parameters are divided into five sections:\n\n- Energy\n- Digital Services\n- Mobility\n- Food and beverages\n- Supplies\n\nEach of the sections can either be estimated or calculated precisely.\n\nThe API returns carbon emissions per each of the sections as well as the total sum.\n\n## Providing Parameters\n\nDepending on which data is available, each section in the calculator can be estimated or calculated based on provided data. For some sections this is done on an even finer scale. \nFor example, it is possible to estimate energy emissions based on empirical data and estimated values. If energy data is available, the emissions can be calculated more precisely.\nSome sections cannot be estimated, e.g. flight emissions as part of mobility data. Flight emission data have to be provided or set to zero (if flights are not applicable). \n\nThe following list defines which parameters need to be provided in which situation:\n\n### Always required\n\n- `name`\n- `country`\n- `number_of_employees`\n- `heated_area`\n\n### Energy information\n\nOnly provide if `estimate_energy` is `0`.\n\n- `power_consumption_kwh`\n- `green_electricity`\n- `oil_liters`\n- `natural_gas_m3`\n- `biogas_m3`\n- `district_heat_kwh`\n- `wood_kwh`\n- `heat_pump`\n\n### Digital Services information\n\nOnly provide if `estimate_digital_services` is `0`.\n- `cloud_storage_gbyte`\n- `web_data_transfer_gbyte`\n\n### Mobility information\n\n#### Commuting\n\nOnly provide if `estimate_commuting_mobility` is `0`:\n\n- `commuted_yearly_public_transportation_km`\n- `commuted_yearly_car_km`\n\n#### Business Trips\n\nOnly provide if `estimate_business_trip_mobility` is `0`\nand if `consider_advanced_business_trip_inputs` is `0`:\n- `business_yearly_car_km`\n\nOnly provide if `estimate_business_trip_mobility` is `0`\nand if `consider_advanced_business_trip_inputs` is `1`:\n- `car_fuel_gasoline_liters`\n- `car_fuel_diesel_liters`\n- `car_fuel_natural_gas_kg`\n- `car_fuel_biogas_kg`\n- `car_fuel_electric_kwh`\n\nIn case of public transportation or accomodation provide:\n- `business_yearly_public_transportation_km`\n- `hotel_nights_amount`\n\n#### Flights\n\nIf you want to include flights in the calculation, even if `estimate_business_trip_mobility` is `0`, provide: \n\n- `short_flights_amount`\n- `medium_flights_amount`\n- `long_flights_amount`\n- `business_or_first_flights_per_cent`\n\nIf you don't provide precise flight data, it will be set to `0`, by default.\n\n### Food and beverages\n\nOnly provide if `estimate_food_and_beverages` is `0`.\n\n- `warm_meal_meat_amount`\n- `warm_meal_vegetarian_amount`\n- `snacks`\n- `soda_liters`\n- `coffee_portions`\n- `tea_portions`\n\n### Supplies\n\nOnly provide if `estimate_supplies` is `0`.\n\n#### Material\n\n- `paper_kg`\n- `paper_recycling_paper_per_cent`\n- `printed_matters_kg`\n- `electronic_devices_amount`\n\nIf more data is known and `consider_advanced_supplies_inputs` is `1`:\n\n- `toners_amount`\n- `water_m3`\n\n#### Garbage\n\n- `garbage_kg`\n- `garbage_recycling_kg`\n- `garbage_electronics_kg`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Acme Inc"
                  },
                  "country": {
                    "type": "string",
                    "description": "2 letter code in capital (ISO 3166-1 alpha-2)",
                    "example": "DE"
                  },
                  "number_of_employees": {
                    "type": "number",
                    "format": "float",
                    "example": 1.4,
                    "description": "Number of full-time positions. Two 70% employees result in a value of `1.4`.",
                    "minimum": 0
                  },
                  "heated_area": {
                    "type": "number",
                    "format": "float",
                    "description": "in `m2`",
                    "example": 200,
                    "minimum": 0
                  },
                  "home_office_per_cent": {
                    "type": "number",
                    "example": 30,
                    "format": "float",
                    "description": "percentage in [0, 100] of the employment"
                  },
                  "estimate_energy": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if energy consumption is not known and should be estimated. In this case, do not provide `power_consumption_kwh`, `green_electricity`, `oil_liters`, `natural_gas_m3`, `biogas_m3`, `district_heat_kwh`, `wood_kwh`, `heat_pump`"
                  },
                  "power_consumption_kwh": {
                    "type": "number",
                    "format": "float",
                    "example": 2234.3,
                    "description": "In `kWh`. Do not provide if `estimate_energy` is `1`",
                    "minimum": 0
                  },
                  "green_electricity": {
                    "type": "boolean",
                    "example": true,
                    "description": "do not provide if `estimate_energy` is `1`"
                  },
                  "oil_liters": {
                    "type": "number",
                    "format": "float",
                    "description": "In liters. Do not provide if `estimate_energy` is `1`",
                    "example": 5304.5,
                    "minimum": 0
                  },
                  "natural_gas_m3": {
                    "type": "number",
                    "format": "float",
                    "description": "in `m3`. Do not provide if `estimate_energy` is `1`",
                    "example": 230.4,
                    "minimum": 0
                  },
                  "biogas_m3": {
                    "type": "number",
                    "format": "float",
                    "description": "In `m3`. Do not provide if `estimate_energy` is `1`",
                    "example": 304.2,
                    "minimum": 0
                  },
                  "district_heat_kwh": {
                    "type": "number",
                    "format": "float",
                    "description": "in `kWh`. Do not provide if `estimate_energy` is `1`",
                    "example": 2304.3,
                    "minimum": 0
                  },
                  "heat_pump": {
                    "type": "boolean",
                    "description": "Record heat pump’s energy consumption as part of your total energy consumption. Do not provide if `estimate_energy` is `1`",
                    "example": true
                  },
                  "wood_kwh": {
                    "type": "number",
                    "format": "float",
                    "example": 1203.9,
                    "description": "In `kWh`. Do not provide if `estimate_energy` is `1`",
                    "minimum": 0
                  },
                  "estimate_digital_services": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if digital service usage is not known and should be estimated. In this case, do not provide `cloud_storage_gbyte`, `web_data_transfer_gbyte`",
                    "x-stoplight": {
                      "id": "jggmd9m9332g4"
                    }
                  },
                  "cloud_storage_gbyte": {
                    "type": "number",
                    "format": "float",
                    "example": 1203.9,
                    "description": "In `GigaByte`. Do not provide if `estimate_energy` is `1`",
                    "minimum": 0
                  },
                  "web_data_transfer_gbyte": {
                    "type": "number",
                    "format": "float",
                    "example": 1203.9,
                    "description": "In `GigaByte`. Do not provide if `estimate_energy` is `1`. Annual amount of company data transferred or downloaded to external servers/providers.\nThis includes, for example, cloud storage, streaming services, web browsing or communications (email, chats).",
                    "minimum": 0
                  },
                  "estimate_commuting_mobility": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if commuting mobility emissions should be estimated. In this case, do not provide `commuted_yearly_public_transportation_km`, \n`commuted_yearly_car_km`"
                  },
                  "commuted_yearly_public_transportation_km": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_commuting_mobility` is `0`"
                  },
                  "commuted_yearly_car_km": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_commuting_mobility` is `0`"
                  },
                  "estimate_business_trip_mobility": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if business trip mobility emissions should be estimated. In this case, do not provide \n`business_yearly_car_km`, `car_fuel_gasoline_liters`,`car_fuel_diesel_liters`, `car_fuel_natural_gas_kg`, `car_fuel_biogas_kg`, `car_fuel_electric_kwh`, `business_yearly_public_transportation_km`, `hotel_nights_amount`"
                  },
                  "consider_advanced_business_trip_inputs": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "if `0`:\nprovide `business_yearly_car_km`\n\nif `1`:\nprovide \n`car_fuel_gasoline_liters`, `car_fuel_diesel_liters`, `car_fuel_natural_gas_kg`, `car_fuel_biogas_kg`, `car_fuel_electric_kwh`"
                  },
                  "business_yearly_car_km": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `0`"
                  },
                  "car_fuel_electric_kwh": {
                    "type": "number",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `1`",
                    "format": "float",
                    "minimum": 0
                  },
                  "car_fuel_gasoline_liters": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `1`"
                  },
                  "car_fuel_diesel_liters": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `1`"
                  },
                  "car_fuel_natural_gas_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `1`"
                  },
                  "car_fuel_biogas_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0` and `consider_advanced_business_trip_inputs` is `1`"
                  },
                  "business_yearly_public_transportation_km": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_business_trip_mobility` is `0`"
                  },
                  "hotel_nights_amount": {
                    "type": "integer",
                    "description": "only provide if `estimate_business_trip_mobility` is `0`",
                    "format": "float"
                  },
                  "short_flights_amount": {
                    "type": "integer",
                    "description": "Up to 3 hours of flight time. Note that roundtrip flights count as 2 flights"
                  },
                  "medium_flights_amount": {
                    "type": "integer",
                    "description": "3-6 hours of flight time. Note that roundtrip flights count as 2 flights"
                  },
                  "long_flights_amount": {
                    "type": "integer",
                    "description": "more than 6 hours of flight time. Note that roundtrip flights count as 2 flights"
                  },
                  "business_or_first_flights_per_cent": {
                    "type": "number",
                    "format": "float",
                    "description": "In percentage, e.g. `50.3` if the value is `50.3%`. ",
                    "example": 50.3,
                    "minimum": 0
                  },
                  "estimate_food_and_beverages": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if food and beverages consumption is not known and should be estimated. In this case, do not provide\n`warm_meal_meat_amount`, `warm_meal_vegetarian_amount`, `snacks`, `soda_liters`, `coffee_portions`, `tea_portions`\n"
                  },
                  "warm_meal_meat_amount": {
                    "type": "integer",
                    "description": "only provide if `estimate_food_and_beverages` is `0`"
                  },
                  "warm_meal_vegetarian_amount": {
                    "type": "integer",
                    "description": "only provide if `estimate_food_and_beverages` is `0`"
                  },
                  "snacks": {
                    "type": "integer",
                    "description": "Number of snacks per day. Only provide if `estimate_food_and_beverages` is `0`"
                  },
                  "soda_liters": {
                    "type": "number",
                    "format": "float",
                    "description": "in liters per day\nconsumption of mineral water and soda\nonly provide if `estimate_food_and_beverages` is `0`"
                  },
                  "coffee_portions": {
                    "type": "integer",
                    "description": "In cups. Only provide if `estimate_food_and_beverages` is `1`"
                  },
                  "tea_portions": {
                    "type": "integer",
                    "description": "In cups. Only provide if `estimate_food_and_beverages` is `0`"
                  },
                  "estimate_supplies": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "`1` if supplies consumption is not known and should be estimated. In this case, do not provide\n`paper_kg`, `paper_recycling_paper_per_cent`, `printed_matters_kg`, `electronic_devices_amount`, `toners_amount`, `water_m3`, `garbage_kg`, `garbage_recycling_kg`, `garbage_electronics_kg`\n "
                  },
                  "consider_advanced_supplies_inputs": {
                    "type": "string",
                    "default": 0,
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "1",
                    "description": "if `0`:\nprovide\n`paper_kg`, `paper_recycling_paper_per_cent`, `printed_matters_kg`, `electronic_devices_amount`\n\n\nif `1`:\nprovide \n`toners_amount`, `water_m3`"
                  },
                  "paper_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0`"
                  },
                  "paper_recycling_paper_per_cent": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0`"
                  },
                  "printed_matters_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0`"
                  },
                  "electronic_devices_amount": {
                    "type": "number",
                    "format": "integer",
                    "description": "Number of new computers, laptops, monitors, etc. bought. Only provide if `estimate_supplies` is `0` and "
                  },
                  "toners_amount": {
                    "type": "integer",
                    "description": "only provide if `estimate_supplies` is `0` and `consider_advanced_supplies_inputs` is `1`"
                  },
                  "water_m3": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0` and `consider_advanced_supplies_inputs` is `1`"
                  },
                  "garbage_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0`"
                  },
                  "garbage_recycling_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0` and `consider_advanced_garbage_inputs` is `1`"
                  },
                  "garbage_electronics_kg": {
                    "type": "number",
                    "format": "float",
                    "description": "only provide if `estimate_supplies` is `0` and `consider_advanced_garbage_inputs` is `1`"
                  }
                },
                "required": [
                  "name",
                  "country",
                  "number_of_employees",
                  "heated_area",
                  "estimate_energy",
                  "estimate_digital_services",
                  "estimate_commuting_mobility",
                  "estimate_business_trip_mobility",
                  "estimate_food_and_beverages",
                  "estimate_supplies"
                ]
              },
              "examples": {
                "Minimal request": {
                  "value": {
                    "name": "Acme Inc.",
                    "country": "CH",
                    "number_of_employees": 5,
                    "heated_area": 500,
                    "estimate_energy": "1",
                    "estimate_commuting_mobility": "1",
                    "estimate_business_trip_mobility": "1",
                    "estimate_food_and_beverages": "1",
                    "estimate_supplies": "1"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Company Calculator"
        ],
        "x-extension-1": null
      }
    },
    "/v1/bulk_flight_calculators": {
      "post": {
        "summary": "Calculate carbon emissions for multiple flights (CSV)",
        "operationId": "post-v1-bulk_flight_calculators-csv",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {},
                "examples": {
                  "Unknown airport": {
                    "value": "\"id\";\"from\";\"to\";\"flight_class\";\"co2eq_kg\";\"km\";\"fuel_kg_pp\";\"price_cents\";\"price_rappens\";\"status\"\n\"3597_abc_31\";\"LIS\";\"MUC\";\"economy\";\"864.25\";\"3972.66\";\"137.18\";\"0\";\"0\";\"OK\"\n\"3598_abc_32\";\"MUC\";\"LIS\";\"first\";\"2659.24\";\"3972.66\";\"422.10\";\"0\";\"0\";\"OK\"\n\"3598_abc_33\";\"FRA\";\"LIS\";\"economy\";\"824.40\";\"3753.58\";\"130.85\";\"0\";\"0\";\"OK\"\n\"3598_abc_00\";\"MUC\";\"ZZY\";\"economy\";\"\";\"\";\"\";\"\";\"\";\"to: Could not find airport\""
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Flight Calculator"
        ],
        "description": "The bulk flight calculator allows to calculate carbon emissions of multiple flights at once. It supports JSON and CSV as input.\n\nWe offer the following solutions to calculate carbon emissions for multiple flights:\n\n- API which accepts either JSON or CSV (this endpoint)\n- A [web UI](https://api.myclimate.org/v1/flight_bulk_entry/new)\n- A [CSV upload tool](https://api.myclimate.org)\n\nBoth the web UI and the CSV upload tool can be used without programming knowledge and do not require development effort.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "csv_file": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Valid example": {
                  "value": "3597_abc_31,LIS,MUC,economy\n3598_abc_32,MUC,LIS,first\n3598_abc_33,FRA,LIS,economy\n3598_abc_00,MUC,ZRH,economy"
                },
                "Unknown airport": {
                  "value": "3597_abc_31,LIS,MUC,economy\n3598_abc_32,MUC,LIS,first\n3598_abc_33,FRA,LIS,economy\n3598_abc_00,MUC,ZZY,economy"
                }
              }
            }
          },
          "description": "## Transmission\n\nSend the CSV file as `multipart/form-data` and name the property `csv_file`. The value of that property should be a reference to the embedded CSV file (sending the CSV content as a value of that property is not accepted).\n\n**Note:** Sending the CSV content as the body in the HTTP request is not supported. You have to use `multipart/form-data` as explained above.\n\n## CSV Format\n\nEvery line in the CSV sent to the API represents a single flight. In the CSV returned by the API, the calculated carbon emissions are appended to each line.\n\nPlease note that a line including column headers should not be included in the CSV.\n\nThe fields required for each line are:\n\n1. an arbitrary reference (ignored by the myclimate calculator, returned to you unchanged)\n2. start airport (a 3-letter IATA code)\n3. destination airport (a 3-letter IATA code)\n4. flight class (`first`, `business` or `economy`)\n\nThe returned CSV contains all of the input columns and the following additional columns (appended at the end of the line):\n\n1. CO2eq emissions (in kg)\n2. relevant flight distance (in km)\n3. amount of used fuel per passenger (in kg)\n4. contribution amount in cents (only present if your API key is configured to return EUR prices)\n5. contribution amount in rappens (only present if your API key is configured to return CHF prices)\n6. status message: either `OK` or an error description as e.g. `to: Could not find airport`.\n\n## Testing Using cURL\n\nYou can use an HTTP command-line client like cURL to send requests to the API directly for testing purposes.\n\nUse the `--user` option to send your username and password separated by a colon.\n\nThe `-F` option lets cURL emulate a filled-in form. This causes it to `POST` data using `Content-Type: multipart/form-data` according to [RFC 2388](https://www.ietf.org/rfc/rfc2388.txt). To load the file, prefix the file name with an `@` sign. You can also tell cURL what `Content-Type` to use by using `type=`.\n\n`\ncurl -—user username:password -F\n\"csv_file=@your_file.csv;type=text/csv\"\nhttps://api.myclimate.org/v1/bulk_flight_calculators\n`"
        }
      }
    },
    "/v1/bulk_car_calculators": {
      "post": {
        "summary": "Calculate carbon emissions of multiple car trips (CSV)",
        "operationId": "post-v1-bulk_car_calculators-csv",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "Not a number": {
                    "value": "\"id\";\"km\";\"car_type\";\"fuel_type\";\"fuel_consumption\";\"electric_location\";\"co2eq_kg\";\"price_cents\";\"status\"\n\"3597_abc_31\";\"32000\";\"small\";\"gas\";\"\";\"\";\"8891.800115029238\";\"0\";\"OK\"\n\"3598_abc_32\";\"200\";\"small\";\"gas\";\"\";\"\";\"55.57375071893274\";\"0\";\"OK\"\n\"3598_abc_33\";\"1200\";\"midsize\";\"diesel\";\"\";\"\";\"376.17331034496175\";\"0\";\"OK\"\n\"3598_abc_00\";\"xyz\";\"luxury_suv_van\";\"biogas\";\"\";\"\";\"\";\"\";\"Km is not a number\""
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Car Calculator"
        ],
        "description": "The bulk flight calculator allows to calculate carbon emissions of multiple flights at once. It supports JSON and CSV as input.\n\nWe offer the following solutions to calculate carbon emissions for multiple flights:\n\n- API which accepts either JSON or CSV (this endpoint)\n- A [web UI](https://api.myclimate.org/v1/flight_bulk_entry/new)\n- A [CSV upload tool](https://api.myclimate.org)\n\nBoth the web UI and the CSV upload tool can be used without programming knowledge and do not require development effort.\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "csv_file": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Not a number": {
                  "value": "3597_abc_31,32000,small,gas\n3598_abc_32,200,small,gas\n3598_abc_33,1200,midsize,diesel\n3598_abc_00,xyz,luxury_suv_van,biogas"
                }
              }
            }
          },
          "description": "## Transmission\n\nSend the CSV file as `multipart/form-data` and name the property `csv_file`. The value of that property should be a reference to the embedded CSV file (sending the CSV content as a value of that property is not accepted).\n\n**Note:** Sending the CSV content as the body in the HTTP request is not supported. You have to use `multipart/form-data` as explained above.\n\n## CSV Format\n\nEvery line in the CSV sent to the API represents a single car trip. In the CSV returned by the API, the calculated carbon emissions are appended to each line.\n\nPlease note that a line including column headers should not be included in the CSV.\n\nThe fields required for each line are:\n\n1. an arbitrary reference (ignored by the myclimate calculator, returned to you unchanged)\n2. length of the trip (in km)\n3. car type\n4. fuel type\n5. fuel consumption\n6. electric location\n\nYour input should only contain ASCII printable characters. Sending Umlauts or other non-ascii characters will lead to an error.\nRefer to the documentation of the car API for single car trips for further documentation on each field.\n\nThe returned CSV contains all of the input columns and the following additional columns (appended at the end of the line):\n\n1. CO2eq emissions (in kg)\n2. contribution amount in cents (only present if your API key is configured to return EUR prices)\n3. contribution amount in rappens (only present if your API key is configured to return CHF prices)\n4. status message: either `OK` or an error description as e.g. `km: must be greater than or equal to 1.`\n\n## Testing Using cURL\n\nYou can use an HTTP command-line client like cURL to send requests to the API directly for testing purposes.\n\nUse the `--user` option to send your username and password separated by a colon.\n\nThe `-F` option lets cURL emulate a filled-in form. This causes it to `POST` data using `Content-Type: multipart/form-data` according to [RFC 2388](https://www.ietf.org/rfc/rfc2388.txt). To load the file, prefix the file name with an `@` sign. You can also tell cURL what `Content-Type` to use by using `type=`.\n\n`\ncurl -—user username:password -F\n\"csv_file=@your_file.csv;type=text/csv\"\nhttps://api.myclimate.org/v1/bulk_flight_calculators\n`"
        }
      }
    },
    "/v1/footprint_calculators.json": {
      "post": {
        "summary": "Calculate carbon emissions of a personal footprint",
        "operationId": "post-v1-footprint_calculators.json",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "kg": {
                      "type": "number"
                    },
                    "mobility_kg": {
                      "type": "string"
                    },
                    "consumption_kg": {
                      "type": "string"
                    },
                    "household_kg": {
                      "type": "string"
                    },
                    "public_services_kg": {
                      "type": "string"
                    },
                    "price_in_eur_cents": {
                      "$ref": "#/components/schemas/PriceEUR"
                    },
                    "price_in_chf_rappen": {
                      "$ref": "#/components/schemas/PriceCHF"
                    },
                    "input_params": {
                      "type": "object",
                      "required": [
                        "mobility_vehicles",
                        "mobility_flight",
                        "consumption_food",
                        "consumption_shopping",
                        "household_area",
                        "household_building",
                        "household_heating"
                      ],
                      "properties": {
                        "mobility_vehicles": {
                          "type": "string"
                        },
                        "mobility_flight": {
                          "type": "string"
                        },
                        "consumption_food": {
                          "type": "string"
                        },
                        "consumption_shopping": {
                          "type": "string"
                        },
                        "household_area": {
                          "type": "string"
                        },
                        "household_building": {
                          "type": "string"
                        },
                        "household_heating": {
                          "type": "string"
                        }
                      }
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "mobility_vehicles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "mobility_flight": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "consumption_food": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "consumption_shopping": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "household_area": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "household_building": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "household_heating": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "input_params"
                  ]
                },
                "examples": {
                  "Valid": {
                    "value": {
                      "kg": 12238.475460077108,
                      "mobility_kg": "2535.6713591286748",
                      "consumption_kg": "6697.282654256381",
                      "household_kg": "1795.5214466920533",
                      "public_services_kg": "1210.0",
                      "price_in_eur_cents": 0,
                      "input_params": {
                        "mobility_vehicles": "high",
                        "mobility_flight": "medium",
                        "consumption_food": "giant",
                        "consumption_shopping": "high",
                        "household_area": "low",
                        "household_building": "high",
                        "household_heating": "high"
                      }
                    }
                  },
                  "Missing parameter": {
                    "value": {
                      "errors": {
                        "household_heating": [
                          "is not included in the list"
                        ]
                      },
                      "input_params": {
                        "mobility_vehicles": "high",
                        "mobility_flight": "medium",
                        "consumption_food": "giant",
                        "consumption_shopping": "high",
                        "household_area": "low",
                        "household_building": "high",
                        "household_heating": null
                      }
                    }
                  },
                  "Invalid parameter": {
                    "value": {
                      "errors": {
                        "household_heating": [
                          "is not included in the list"
                        ]
                      },
                      "input_params": {
                        "mobility_vehicles": "high",
                        "mobility_flight": "medium",
                        "consumption_food": "giant",
                        "consumption_shopping": "high",
                        "household_area": "low",
                        "household_building": "high",
                        "household_heating": "invalid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The myclimate footprint API calculates the carbon emissions of a footprint of a single person. It takes emissions into account from different areas of live, such as mobility or consumption.\n\nTo understand the values used in the footprint API (such as `low` or `medium`), please refer to the [questions and answers on the web version of the footprint calculator](https://co2.myclimate.org/en/footprint_calculators/new).\n\nIf you agreed on a climate protection contribution amount per ton with myclimate, the API can return the according amount to contribute to climate protection for the calculated emissions in EUR and/or CHF. Please contact us whether you would like to use this feature and if so, in which currencies.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FootprintCalculatorInput"
              },
              "examples": {
                "Valid": {
                  "value": {
                    "mobility_vehicles": "high",
                    "mobility_flight": "medium",
                    "consumption_food": "giant",
                    "consumption_shopping": "high",
                    "household_area": "low",
                    "household_building": "high",
                    "household_heating": "high"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Footprint Calculator"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "FlightCalculatorInput": {
        "title": "FlightCalculatorInput",
        "type": "object",
        "description": "",
        "properties": {
          "from": {
            "type": "string",
            "description": "departure airport, a 3-letter IATA airport code",
            "example": "ZRH",
            "pattern": "[A-Z]{3}",
            "minLength": 3,
            "maxLength": 3
          },
          "to": {
            "type": "string",
            "description": "destination airport, a 3-letter IATA airport code",
            "example": "FRA",
            "pattern": "[A-Z]{3}",
            "minLength": 3,
            "maxLength": 3
          },
          "via": {
            "type": "string",
            "description": "stopover airport, a 3-letter IATA airport code",
            "example": "LHR",
            "pattern": "[A-Z]{3}",
            "minLength": 3,
            "maxLength": 3
          },
          "passengers": {
            "type": "integer",
            "default": 1,
            "example": 2,
            "minimum": 1,
            "maximum": 50,
            "description": "number of passengers the carbon emissions should be calculated for"
          },
          "roundtrip": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "whether the flight is one way (roundtrip is `false`) or if the return flight should be included as well (roundtrip is `true`)"
          },
          "flight_class": {
            "type": "string",
            "enum": [
              "economy",
              "business",
              "first",
              "premiumeconomy"
            ],
            "example": "economy",
            "description": ""
          }
        },
        "required": [
          "from",
          "to",
          "flight_class"
        ]
      },
      "FlightCalculatorOutput": {
        "title": "FlightCalculatorOutput",
        "type": "object",
        "properties": {
          "errors": {
            "$ref": "#/components/schemas/FlightCalculatorErrors"
          },
          "input_params": {
            "$ref": "#/components/schemas/FlightCalculatorInput"
          },
          "kg": {
            "$ref": "#/components/schemas/CO2eqkg"
          },
          "km": {
            "type": "number",
            "format": "double",
            "description": "only present when there were no errors in the request"
          },
          "fuel_kg_per_passenger": {
            "type": "number",
            "format": "double",
            "description": "only present when there were no errors in the request"
          },
          "price_in_eur_cents": {
            "$ref": "#/components/schemas/PriceEUR"
          },
          "price_in_chf_rappen": {
            "$ref": "#/components/schemas/PriceCHF"
          }
        },
        "required": [
          "input_params"
        ]
      },
      "FlightCalculatorErrors": {
        "title": "Errors",
        "type": "object",
        "description": "only present when errors are present in the request",
        "properties": {
          "from": {
            "type": "array",
            "example": [
              "can't be blank"
            ],
            "items": {
              "type": "string",
              "example": "Could not find airport 'ZZZ'"
            }
          },
          "to": {
            "type": "array",
            "example": [
              "can't be blank"
            ],
            "items": {
              "type": "string",
              "example": "Could not find airport 'ZZZ'"
            }
          },
          "via": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Could not find airport 'ZZZ'"
            }
          },
          "flight_class": {
            "type": "array",
            "example": [
              "can't be blank"
            ],
            "items": {
              "type": "string",
              "example": "is not included in the list"
            }
          },
          "passengers": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "is not included in the list"
            }
          }
        }
      },
      "CarCalculatorInput": {
        "title": "CarCalculatorInput",
        "type": "object",
        "properties": {
          "car_type": {
            "type": "string",
            "description": "Used for the estimation of fuel consumption. Specify the `car_type` only if `fuel_consumption` is not known.",
            "enum": [
              "small",
              "midsize",
              "luxury_suv_van"
            ],
            "example": "midsize"
          },
          "fuel_type": {
            "type": "string",
            "enum": [
              "gas",
              "diesel",
              "hybrid",
              "biogas",
              "naturalgas",
              "electric",
              "biodiesel",
              "ethanol_10",
              "ethanol_85",
              "plug_in_hybrid"
            ],
            "example": "diesel",
            "description": "type of fuel used by the car"
          },
          "fuel_consumption": {
            "type": "number",
            "format": "float",
            "example": 5.6,
            "minimum": 0,
            "maximum": 99,
            "description": "Average amount of fuel consumed by the car when travelling 100km. When specifying `fuel_consumption`, do not specify `car_type`."
          },
          "km": {
            "type": "number",
            "format": "float",
            "example": 1345.5,
            "minimum": 1,
            "maximum": 1000000,
            "description": "length of the trip"
          },
          "electric_location": {
            "type": "string",
            "enum": [
              "ch",
              "de",
              "rest",
              "at",
              "certified_green",
              "se"
            ],
            "example": "ch",
            "description": "required if `fuel_type` is `electric` or `plug_in_hybrid`, defines which power mix is used to charge the car"
          }
        },
        "required": [
          "fuel_type",
          "km"
        ],
        "description": "The preferred calculation method is to supply `fuel_consumption`. If that is not known, a `car_type` can be specified and the average fuel consumption is estimated. Note that if `fuel_consumption` is supplied, `car_type` is ignored."
      },
      "PriceEUR": {
        "type": "number",
        "title": "PriceEUR",
        "format": "float",
        "description": "only present when agreed on returning a price in EUR"
      },
      "PriceCHF": {
        "type": "number",
        "title": "PriceCHF",
        "format": "float",
        "description": "only present when agreed on returning a price in CHF"
      },
      "CO2eqkg": {
        "type": "number",
        "title": "CO2eqkg",
        "format": "double",
        "example": 8402.385146467666,
        "description": "carbon equivalent emissions in kg\nonly present when there were no errors in the request"
      },
      "CruiseCalculatorInput": {
        "title": "CruiseCalculatorInput",
        "type": "object",
        "properties": {
          "cruise_duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "example": 14,
            "description": "duration of the whole cruise in days (including both days on sea and days in harbour)"
          },
          "cruise_cabin_type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "`0`: standard<br />\n`1`: suite<br />\n`2`: penthouse",
            "example": 0
          },
          "cruise_size_class": {
            "type": "integer",
            "minimum": 0,
            "description": "maximum amount of passengers the cruise ship holds<br /><br />\n`0`: < 500<br />\n`1`: 500 - 1000<br />\n`2`: 1000 - 2000<br />\n`3`: 2000 - 3000<br />\n`4`: 3000 - 4000<br />\n`5`: > 4000",
            "maximum": 5,
            "example": 3
          },
          "number_of_compensations": {
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "example": 2
          },
          "number_of_occupants": {
            "type": "integer",
            "minimum": 1,
            "maximum": 12,
            "example": 2,
            "description": "number of people staying in the cabin",
            "format": "int32"
          },
          "cruise_days_with_port_call": {
            "type": "integer",
            "description": "number of days with port call during the cruise, can't exceed the duration of the cruise ",
            "example": 12,
            "format": "int32"
          }
        },
        "required": [
          "cruise_duration",
          "cruise_cabin_type",
          "cruise_size_class",
          "number_of_compensations",
          "number_of_occupants"
        ]
      },
      "Airport3LetterIATA": {
        "type": "string",
        "title": "Airport3LetterIATA",
        "description": "a 3-letter IATA airport code",
        "x-examples": {},
        "example": "ZRH"
      },
      "BulkCustomerReference": {
        "type": "string",
        "title": "BulkCustomerReference",
        "example": "abc456",
        "description": "An arbitrary reference which is returned to you in the response. Useful to crossreference the same flight or car trip from the input to the output."
      },
      "FootprintCalculatorInput": {
        "title": "FootprintCalculatorInput",
        "type": "object",
        "properties": {
          "mobility_vehicles": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "giant"
            ],
            "example": "high"
          },
          "mobility_flight": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "giant"
            ],
            "example": "medium"
          },
          "consumption_food": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "giant"
            ],
            "example": "giant"
          },
          "consumption_shopping": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "giant"
            ],
            "example": "high"
          },
          "household_area": {
            "type": "string",
            "enum": [
              "low",
              "high"
            ],
            "example": "low"
          },
          "household_building": {
            "type": "string",
            "enum": [
              "low",
              "high"
            ],
            "example": "high"
          },
          "household_heating": {
            "type": "string",
            "enum": [
              "low",
              "high"
            ],
            "example": "high"
          }
        },
        "required": [
          "mobility_vehicles",
          "mobility_flight",
          "consumption_food",
          "consumption_shopping",
          "household_area",
          "household_building",
          "household_heating"
        ]
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "scheme": "basic",
        "description": "The myclimate APIs use HTTP basic authentication. You need a username and password to connect to any of them. Please contact us if you are interested.\n\nNote that due to the unencrypted basic authentication, myclimate APIs are only available via HTTPS.\n\nMany programming languages, frameworks or tools support basic authentication. Supply them the username and password you got from myclimate to authenticate.\n\nIf the framework used does not support basic authentication, include an HTTP header called `Authorization` with the content `Basic <mysecret>`. Replace `<mysecret>` with the Base64-encoded concatenation of the provided username and password, separated by a colon `:`.\n\n**Example**\n\nAssume your username is `acme` and your password is `secret`. Concatenate both and separate them with a colon. You get: `acme:secret`. Encode that whole string using Base64 to get `YWNtZTpzZWNyZXQ=`. Your HTTP header `Authorization` should then have the content `Basic YWNtZTpzZWNyZXQ=`."
      }
    }
  },
  "security": [
    {
      "Basic": []
    }
  ],
  "tags": [
    {
      "name": "Car Calculator"
    },
    {
      "name": "Flight Calculator"
    },
    {
      "name": "Cruise Ship Calculator"
    },
    {
      "name": "Company Calculator"
    }
  ]
}